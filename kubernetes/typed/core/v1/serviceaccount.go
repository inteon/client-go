/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	authenticationv1 "k8s.io/api/authentication/v1"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	corev1 "k8s.io/client-go/applyconfigurations/core/v1"
	watch "k8s.io/client-go/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ServiceAccountsGetter has a method to return a ServiceAccountInterface.
// A group's client should implement this interface.
type ServiceAccountsGetter interface {
	ServiceAccounts(namespace string) ServiceAccountInterface
}

// ServiceAccountInterface has methods to work with ServiceAccount resources.
type ServiceAccountInterface interface {
	Create(ctx context.Context, serviceAccount *v1.ServiceAccount, options metav1.CreateOptions) (*v1.ServiceAccount, error)
	Update(ctx context.Context, serviceAccount *v1.ServiceAccount, options metav1.UpdateOptions) (*v1.ServiceAccount, error)
	Delete(ctx context.Context, name string, options metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, options metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(ctx context.Context, name string, options metav1.GetOptions) (*v1.ServiceAccount, error)
	List(ctx context.Context, options metav1.ListOptions) (*v1.ServiceAccountList, error)
	Watch(ctx context.Context, options metav1.ListOptions) (watch.Watcher, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, options metav1.PatchOptions, subresources ...string) (result *v1.ServiceAccount, err error)
	Apply(ctx context.Context, serviceAccount *corev1.ServiceAccountApplyConfiguration, options metav1.ApplyOptions) (result *v1.ServiceAccount, err error)
	CreateToken(ctx context.Context, serviceAccountName string, tokenRequest *authenticationv1.TokenRequest, options metav1.CreateOptions) (*authenticationv1.TokenRequest, error)

	ServiceAccountExpansion
}

// serviceAccounts implements ServiceAccountInterface
type serviceAccounts struct {
	client rest.Interface
	ns     string
}

// newServiceAccounts returns a ServiceAccounts
func newServiceAccounts(c *CoreV1Client, namespace string) *serviceAccounts {
	return &serviceAccounts{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the serviceAccount, and returns the corresponding serviceAccount object, and an error if there is any.
func (c *serviceAccounts) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.ServiceAccount, err error) {
	result = &v1.ServiceAccount{}
	err = c.client.Get().
		ApiPath("/api").
		GroupVersion(v1.SchemeGroupVersion).
		Namespace(c.ns).
		Resource("serviceaccounts").
		Name(name).
		VersionedParams(&options).
		ExpectKind("ServiceAccount").
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ServiceAccounts that match those selectors.
func (c *serviceAccounts) List(ctx context.Context, options metav1.ListOptions) (result *v1.ServiceAccountList, err error) {
	var timeout time.Duration
	if options.TimeoutSeconds != nil {
		timeout = time.Duration(*options.TimeoutSeconds) * time.Second
	}
	result = &v1.ServiceAccountList{}
	err = c.client.Get().
		ApiPath("/api").
		GroupVersion(v1.SchemeGroupVersion).
		Namespace(c.ns).
		Resource("serviceaccounts").
		VersionedParams(&options).
		Timeout(timeout).
		ExpectKind("ServiceAccount").
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Watcher that watches the requested serviceAccounts.
func (c *serviceAccounts) Watch(ctx context.Context, options metav1.ListOptions) (watch.Watcher, error) {
	var timeout time.Duration
	if options.TimeoutSeconds != nil {
		timeout = time.Duration(*options.TimeoutSeconds) * time.Second
	}
	options.Watch = true
	return c.client.Get().
		ApiPath("/api").
		GroupVersion(v1.SchemeGroupVersion).
		Namespace(c.ns).
		Resource("serviceaccounts").
		VersionedParams(&options).
		Timeout(timeout).
		ExpectKind("ServiceAccount").
		Watch(ctx)
}

// Create takes the representation of a serviceAccount and creates it.  Returns the server's representation of the serviceAccount, and an error, if there is any.
func (c *serviceAccounts) Create(ctx context.Context, serviceAccount *v1.ServiceAccount, options metav1.CreateOptions) (result *v1.ServiceAccount, err error) {
	result = &v1.ServiceAccount{}
	err = c.client.Post().
		ApiPath("/api").
		GroupVersion(v1.SchemeGroupVersion).
		Namespace(c.ns).
		Resource("serviceaccounts").
		VersionedParams(&options).
		Body(serviceAccount).
		ExpectKind("ServiceAccount").
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a serviceAccount and updates it. Returns the server's representation of the serviceAccount, and an error, if there is any.
func (c *serviceAccounts) Update(ctx context.Context, serviceAccount *v1.ServiceAccount, options metav1.UpdateOptions) (result *v1.ServiceAccount, err error) {
	result = &v1.ServiceAccount{}
	err = c.client.Put().
		ApiPath("/api").
		GroupVersion(v1.SchemeGroupVersion).
		Namespace(c.ns).
		Resource("serviceaccounts").
		Name(serviceAccount.Name).
		VersionedParams(&options).
		Body(serviceAccount).
		ExpectKind("ServiceAccount").
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the serviceAccount and deletes it. Returns an error if one occurs.
func (c *serviceAccounts) Delete(ctx context.Context, name string, options metav1.DeleteOptions) error {
	return c.client.Delete().
		ApiPath("/api").
		GroupVersion(v1.SchemeGroupVersion).
		Namespace(c.ns).
		Resource("serviceaccounts").
		Name(name).
		Body(&options).
		ExpectKind("ServiceAccount").
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *serviceAccounts) DeleteCollection(ctx context.Context, options metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		ApiPath("/api").
		GroupVersion(v1.SchemeGroupVersion).
		Namespace(c.ns).
		Resource("serviceaccounts").
		VersionedParams(&listOptions).
		Timeout(timeout).
		Body(&options).
		ExpectKind("ServiceAccount").
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched serviceAccount.
func (c *serviceAccounts) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, options metav1.PatchOptions, subresources ...string) (result *v1.ServiceAccount, err error) {
	result = &v1.ServiceAccount{}
	err = c.client.Patch(pt).
		ApiPath("/api").
		GroupVersion(v1.SchemeGroupVersion).
		Namespace(c.ns).
		Resource("serviceaccounts").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&options).
		Body(data).
		ExpectKind("ServiceAccount").
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied serviceAccount.
func (c *serviceAccounts) Apply(ctx context.Context, serviceAccount *corev1.ServiceAccountApplyConfiguration, options metav1.ApplyOptions) (result *v1.ServiceAccount, err error) {
	if serviceAccount == nil {
		return nil, fmt.Errorf("serviceAccount provided to Apply must not be nil")
	}
	patchOpts := options.ToPatchOptions()
	data, err := json.Marshal(serviceAccount)
	if err != nil {
		return nil, err
	}
	name := serviceAccount.Name
	if name == nil {
		return nil, fmt.Errorf("serviceAccount.Name must be provided to Apply")
	}
	result = &v1.ServiceAccount{}
	err = c.client.Patch(types.ApplyPatchType).
		ApiPath("/api").
		GroupVersion(v1.SchemeGroupVersion).
		Namespace(c.ns).
		Resource("serviceaccounts").
		Name(*name).
		VersionedParams(&patchOpts).
		Body(data).
		ExpectKind("ServiceAccount").
		Do(ctx).
		Into(result)
	return
}

// CreateToken takes the representation of a tokenRequest and creates it.  Returns the server's representation of the tokenRequest, and an error, if there is any.
func (c *serviceAccounts) CreateToken(ctx context.Context, serviceAccountName string, tokenRequest *authenticationv1.TokenRequest, options metav1.CreateOptions) (result *authenticationv1.TokenRequest, err error) {
	result = &authenticationv1.TokenRequest{}
	err = c.client.Post().
		ApiPath("/api").
		GroupVersion(v1.SchemeGroupVersion).
		Namespace(c.ns).
		Resource("serviceaccounts").
		Name(serviceAccountName).
		SubResource("token").
		VersionedParams(&options).
		Body(tokenRequest).
		ExpectKind("ServiceAccount").
		Do(ctx).
		Into(result)
	return
}
